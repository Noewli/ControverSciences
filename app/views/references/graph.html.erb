<% provide(:title, 'Le graphe des references') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>

<span id="d3-graph">

<script type="text/javascript">
  function groupColor(group){
      switch (group) {
          case 0:
              color = "#3366CC";
              break;
          case 1:
              color = "#702BD9";
              break;
          case 2:
              color = "#322DE3";
              break;
          case 3:
              color = "#3366CC";
              break;
          case 4:
              color = "#2DABE3";
              break;
          case 5:
              color = "#2BD9CF";
              break;
      }
      return color
  }
    var width = $(window).width();
            height = $(window).height()-125;
    var color = d3.scale.category20();
    var force = d3.layout.force()
            .linkDistance(10)
            .linkStrength(2)
            .size([width, height]);
    var svg = d3.select("#d3-graph").append("svg")
            .attr("width", width)
            .attr("height", height);
    d3.json("/references_network?timeline_id=<%= params[:timeline_id] %>", function(error, graph) {
        if (error) throw error;
        var nodes = graph.nodes.slice(),
                links = [],
                bilinks = [];
        graph.links.forEach(function(link) {
            var s = nodes.filter(function(n) {
                        return n.id === link.source;
                    })[0],
                t = nodes.filter(function(n) {
                        return n.id === link.target;
                    })[0],
                    i = {}; // intermediate node
            nodes.push(i);
            links.push({source: s, target: i}, {source: i, target: t});
            bilinks.push([s, i, t]);
        });
        force
                .nodes(nodes)
                .links(links)
                .start();
        var link = svg.selectAll(".link")
                .data(bilinks)
                .enter().append("path")
                .attr("class", "link");
        var node = svg.selectAll(".node")
                .data(graph.nodes)
                .enter().append("circle")
                .attr("class", "node")
                .attr("r", function(d) { return 3*d.size; })
                .style("fill", function(d) { return groupColor(d.group); })
                .call(force.drag);
        node.attr("title", function(d) { return $('<div/>').html(d.name).text(); });
        node.attr("data-toggle","tooltip");
        force.on("tick", function() {
            link.attr("d", function(d) {
                return "M" + d[0].x + "," + d[0].y
                        + "S" + d[1].x + "," + d[1].y
                        + " " + d[2].x + "," + d[2].y;
            });
            node.attr("transform", function(d) {
                return "translate(" + d.x + "," + d.y + ")";
            });
            $('[data-toggle="tooltip"]').tooltip({container: 'body'});
        });
    });
</script>